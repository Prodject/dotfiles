!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-h>	.vim/vimrc	/^noremap <C-h> <C-w>h$/;"	m
<C-j>	.vim/vimrc	/^noremap <C-j> <C-w>j$/;"	m
<C-k>	.vim/vimrc	/^noremap <C-k> <C-w>k$/;"	m
<C-l>	.vim/vimrc	/^noremap <C-l> <C-w>l$/;"	m
<F8>	.vim/vimrc	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<Leader>a	.vim/vimrc	/^map <Leader>a ggVG$/;"	m
<Leader>n	.vim/vimrc	/^map <Leader>n <plug>NERDTreeMirrorToggle<CR>$/;"	m
<Leader>s	.vim/vimrc	/^map <Leader>s :setlocal spell!<CR>$/;"	m
<Tab>	.vim/vimrc	/^imap <Tab> <C-P>$/;"	m
COMPREPLY=	.bashrc.d/git-completion.bash	/^	COMPREPLY=()$/;"	f
COMPREPLY=	.bashrc.d/rclone-complete.bash	/^                COMPREPLY=()$/;"	f
COMPREPLY=	.bashrc.d/rclone-complete.bash	/^    COMPREPLY=()$/;"	f
LastMod	.vim/vimrc	/^fun LastMod()$/;"	f
NERDTReeQuitOnOpen	.vim/vimrc	/^let NERDTReeQuitOnOpen = 1$/;"	v
NERDTreeBookmarksFile	.vim/vimrc	/^let NERDTreeBookmarksFile = "$HOME\/.vim\/NERDTreeBookmark"$/;"	v
NERDTreeChDirMode	.vim/vimrc	/^let NERDTreeChDirMode = 2$/;"	v
NERDTreeDirArrows	.vim/vimrc	/^let NERDTreeDirArrows = 1$/;"	v
NERDTreeNaturalSort	.vim/vimrc	/^let NERDTreeNaturalSort = 1$/;"	v
NERDTreeShowBookmarks	.vim/vimrc	/^let NERDTreeShowBookmarks = 1$/;"	v
NERDTreeShowHidden	.vim/vimrc	/^let NERDTreeShowHidden = 1$/;"	v
NERDTreeShowLineNumbers	.vim/vimrc	/^let NERDTreeShowLineNumbers=1$/;"	v
__contains_word	.bashrc.d/rclone-complete.bash	/^__contains_word()$/;"	f
__debug	.bashrc.d/rclone-complete.bash	/^__debug()$/;"	f
__git	.bashrc.d/git-completion.bash	/^__git ()$/;"	f
__git_aliased_command	.bashrc.d/git-completion.bash	/^__git_aliased_command ()$/;"	f
__git_aliases	.bashrc.d/git-completion.bash	/^__git_aliases ()$/;"	f
__git_commands	.bashrc.d/git-completion.bash	/^__git_commands () {$/;"	f
__git_complete	.bashrc.d/git-completion.bash	/^__git_complete ()$/;"	f
__git_complete_fetch_refspecs	.bashrc.d/git-completion.bash	/^__git_complete_fetch_refspecs ()$/;"	f
__git_complete_file	.bashrc.d/git-completion.bash	/^__git_complete_file ()$/;"	f
__git_complete_force_with_lease	.bashrc.d/git-completion.bash	/^__git_complete_force_with_lease ()$/;"	f
__git_complete_index_file	.bashrc.d/git-completion.bash	/^__git_complete_index_file ()$/;"	f
__git_complete_refs	.bashrc.d/git-completion.bash	/^__git_complete_refs ()$/;"	f
__git_complete_remote_or_refspec	.bashrc.d/git-completion.bash	/^__git_complete_remote_or_refspec ()$/;"	f
__git_complete_revlist	.bashrc.d/git-completion.bash	/^__git_complete_revlist ()$/;"	f
__git_complete_revlist_file	.bashrc.d/git-completion.bash	/^__git_complete_revlist_file ()$/;"	f
__git_complete_strategy	.bashrc.d/git-completion.bash	/^__git_complete_strategy ()$/;"	f
__git_complete_symbol	.bashrc.d/git-completion.bash	/^__git_complete_symbol () {$/;"	f
__git_compute_all_commands	.bashrc.d/git-completion.bash	/^__git_compute_all_commands ()$/;"	f
__git_compute_merge_strategies	.bashrc.d/git-completion.bash	/^__git_compute_merge_strategies ()$/;"	f
__git_compute_porcelain_commands	.bashrc.d/git-completion.bash	/^__git_compute_porcelain_commands ()$/;"	f
__git_config_get_set_variables	.bashrc.d/git-completion.bash	/^__git_config_get_set_variables ()$/;"	f
__git_count_arguments	.bashrc.d/git-completion.bash	/^__git_count_arguments ()$/;"	f
__git_eread	.bashrc.d/git-prompt.sh	/^__git_eread ()$/;"	f
__git_find_on_cmdline	.bashrc.d/git-completion.bash	/^__git_find_on_cmdline ()$/;"	f
__git_find_repo_path	.bashrc.d/git-completion.bash	/^__git_find_repo_path ()$/;"	f
__git_func_wrap	.bashrc.d/git-completion.bash	/^__git_func_wrap ()$/;"	f
__git_get_config_variables	.bashrc.d/git-completion.bash	/^__git_get_config_variables ()$/;"	f
__git_get_option_value	.bashrc.d/git-completion.bash	/^__git_get_option_value ()$/;"	f
__git_has_doubledash	.bashrc.d/git-completion.bash	/^__git_has_doubledash ()$/;"	f
__git_heads	.bashrc.d/git-completion.bash	/^__git_heads ()$/;"	f
__git_index_files	.bashrc.d/git-completion.bash	/^__git_index_files ()$/;"	f
__git_is_configured_remote	.bashrc.d/git-completion.bash	/^__git_is_configured_remote ()$/;"	f
__git_list_all_commands	.bashrc.d/git-completion.bash	/^__git_list_all_commands ()$/;"	f
__git_list_merge_strategies	.bashrc.d/git-completion.bash	/^__git_list_merge_strategies ()$/;"	f
__git_list_porcelain_commands	.bashrc.d/git-completion.bash	/^__git_list_porcelain_commands ()$/;"	f
__git_ls_files_helper	.bashrc.d/git-completion.bash	/^__git_ls_files_helper ()$/;"	f
__git_main	.bashrc.d/git-completion.bash	/^__git_main ()$/;"	f
__git_match_ctag	.bashrc.d/git-completion.bash	/^__git_match_ctag () {$/;"	f
__git_pretty_aliases	.bashrc.d/git-completion.bash	/^__git_pretty_aliases ()$/;"	f
__git_ps1	.bashrc.d/git-prompt.sh	/^__git_ps1 ()$/;"	f
__git_ps1_colorize_gitstring	.bashrc.d/git-prompt.sh	/^__git_ps1_colorize_gitstring ()$/;"	f
__git_ps1_show_upstream	.bashrc.d/git-prompt.sh	/^__git_ps1_show_upstream ()$/;"	f
__git_reassemble_comp_words_by_ref	.bashrc.d/git-completion.bash	/^__git_reassemble_comp_words_by_ref()$/;"	f
__git_refs	.bashrc.d/git-completion.bash	/^__git_refs ()$/;"	f
__git_refs2	.bashrc.d/git-completion.bash	/^__git_refs2 ()$/;"	f
__git_refs_remotes	.bashrc.d/git-completion.bash	/^__git_refs_remotes ()$/;"	f
__git_remotes	.bashrc.d/git-completion.bash	/^__git_remotes ()$/;"	f
__git_tags	.bashrc.d/git-completion.bash	/^__git_tags ()$/;"	f
__gitcomp	.bashrc.d/git-completion.bash	/^	__gitcomp ()$/;"	f
__gitcomp	.bashrc.d/git-completion.bash	/^__gitcomp ()$/;"	f
__gitcomp_direct	.bashrc.d/git-completion.bash	/^	__gitcomp_direct ()$/;"	f
__gitcomp_direct	.bashrc.d/git-completion.bash	/^__gitcomp_direct ()$/;"	f
__gitcomp_file	.bashrc.d/git-completion.bash	/^	__gitcomp_file ()$/;"	f
__gitcomp_file	.bashrc.d/git-completion.bash	/^__gitcomp_file ()$/;"	f
__gitcomp_nl	.bashrc.d/git-completion.bash	/^	__gitcomp_nl ()$/;"	f
__gitcomp_nl	.bashrc.d/git-completion.bash	/^__gitcomp_nl ()$/;"	f
__gitcomp_nl_append	.bashrc.d/git-completion.bash	/^__gitcomp_nl_append ()$/;"	f
__gitcompadd	.bashrc.d/git-completion.bash	/^__gitcompadd ()$/;"	f
__gitcompappend	.bashrc.d/git-completion.bash	/^__gitcompappend ()$/;"	f
__gitdir	.bashrc.d/git-completion.bash	/^__gitdir ()$/;"	f
__gitk_main	.bashrc.d/git-completion.bash	/^__gitk_main ()$/;"	f
__handle_command	.bashrc.d/rclone-complete.bash	/^__handle_command()$/;"	f
__handle_filename_extension_flag	.bashrc.d/rclone-complete.bash	/^__handle_filename_extension_flag()$/;"	f
__handle_flag	.bashrc.d/rclone-complete.bash	/^__handle_flag()$/;"	f
__handle_noun	.bashrc.d/rclone-complete.bash	/^__handle_noun()$/;"	f
__handle_reply	.bashrc.d/rclone-complete.bash	/^__handle_reply()$/;"	f
__handle_subdirs_in_dir_flag	.bashrc.d/rclone-complete.bash	/^__handle_subdirs_in_dir_flag()$/;"	f
__handle_word	.bashrc.d/rclone-complete.bash	/^__handle_word()$/;"	f
__index_of_word	.bashrc.d/rclone-complete.bash	/^__index_of_word()$/;"	f
__my_init_completion	.bashrc.d/rclone-complete.bash	/^__my_init_completion()$/;"	f
__start_rclone	.bashrc.d/rclone-complete.bash	/^__start_rclone()$/;"	f
_get_comp_words_by_ref	.bashrc.d/git-completion.bash	/^_get_comp_words_by_ref ()$/;"	f
_git	.bashrc.d/git-completion.bash	/^	_git ()$/;"	f
_git	.bashrc.d/git-completion.bash	/^_git ()$/;"	f
_git_add	.bashrc.d/git-completion.bash	/^_git_add ()$/;"	f
_git_am	.bashrc.d/git-completion.bash	/^_git_am ()$/;"	f
_git_apply	.bashrc.d/git-completion.bash	/^_git_apply ()$/;"	f
_git_archive	.bashrc.d/git-completion.bash	/^_git_archive ()$/;"	f
_git_bisect	.bashrc.d/git-completion.bash	/^_git_bisect ()$/;"	f
_git_branch	.bashrc.d/git-completion.bash	/^_git_branch ()$/;"	f
_git_bundle	.bashrc.d/git-completion.bash	/^_git_bundle ()$/;"	f
_git_checkout	.bashrc.d/git-completion.bash	/^_git_checkout ()$/;"	f
_git_cherry	.bashrc.d/git-completion.bash	/^_git_cherry ()$/;"	f
_git_cherry_pick	.bashrc.d/git-completion.bash	/^_git_cherry_pick ()$/;"	f
_git_clean	.bashrc.d/git-completion.bash	/^_git_clean ()$/;"	f
_git_clone	.bashrc.d/git-completion.bash	/^_git_clone ()$/;"	f
_git_commit	.bashrc.d/git-completion.bash	/^_git_commit ()$/;"	f
_git_config	.bashrc.d/git-completion.bash	/^_git_config ()$/;"	f
_git_describe	.bashrc.d/git-completion.bash	/^_git_describe ()$/;"	f
_git_diff	.bashrc.d/git-completion.bash	/^_git_diff ()$/;"	f
_git_difftool	.bashrc.d/git-completion.bash	/^_git_difftool ()$/;"	f
_git_fetch	.bashrc.d/git-completion.bash	/^_git_fetch ()$/;"	f
_git_format_patch	.bashrc.d/git-completion.bash	/^_git_format_patch ()$/;"	f
_git_fsck	.bashrc.d/git-completion.bash	/^_git_fsck ()$/;"	f
_git_gc	.bashrc.d/git-completion.bash	/^_git_gc ()$/;"	f
_git_gitk	.bashrc.d/git-completion.bash	/^_git_gitk ()$/;"	f
_git_grep	.bashrc.d/git-completion.bash	/^_git_grep ()$/;"	f
_git_help	.bashrc.d/git-completion.bash	/^_git_help ()$/;"	f
_git_init	.bashrc.d/git-completion.bash	/^_git_init ()$/;"	f
_git_log	.bashrc.d/git-completion.bash	/^_git_log ()$/;"	f
_git_ls_files	.bashrc.d/git-completion.bash	/^_git_ls_files ()$/;"	f
_git_ls_remote	.bashrc.d/git-completion.bash	/^_git_ls_remote ()$/;"	f
_git_ls_tree	.bashrc.d/git-completion.bash	/^_git_ls_tree ()$/;"	f
_git_merge	.bashrc.d/git-completion.bash	/^_git_merge ()$/;"	f
_git_merge_base	.bashrc.d/git-completion.bash	/^_git_merge_base ()$/;"	f
_git_mergetool	.bashrc.d/git-completion.bash	/^_git_mergetool ()$/;"	f
_git_mv	.bashrc.d/git-completion.bash	/^_git_mv ()$/;"	f
_git_name_rev	.bashrc.d/git-completion.bash	/^_git_name_rev ()$/;"	f
_git_notes	.bashrc.d/git-completion.bash	/^_git_notes ()$/;"	f
_git_pull	.bashrc.d/git-completion.bash	/^_git_pull ()$/;"	f
_git_push	.bashrc.d/git-completion.bash	/^_git_push ()$/;"	f
_git_rebase	.bashrc.d/git-completion.bash	/^_git_rebase ()$/;"	f
_git_reflog	.bashrc.d/git-completion.bash	/^_git_reflog ()$/;"	f
_git_remote	.bashrc.d/git-completion.bash	/^_git_remote ()$/;"	f
_git_replace	.bashrc.d/git-completion.bash	/^_git_replace ()$/;"	f
_git_rerere	.bashrc.d/git-completion.bash	/^_git_rerere ()$/;"	f
_git_reset	.bashrc.d/git-completion.bash	/^_git_reset ()$/;"	f
_git_revert	.bashrc.d/git-completion.bash	/^_git_revert ()$/;"	f
_git_rm	.bashrc.d/git-completion.bash	/^_git_rm ()$/;"	f
_git_send_email	.bashrc.d/git-completion.bash	/^_git_send_email ()$/;"	f
_git_shortlog	.bashrc.d/git-completion.bash	/^_git_shortlog ()$/;"	f
_git_show	.bashrc.d/git-completion.bash	/^_git_show ()$/;"	f
_git_show_branch	.bashrc.d/git-completion.bash	/^_git_show_branch ()$/;"	f
_git_stage	.bashrc.d/git-completion.bash	/^_git_stage ()$/;"	f
_git_stash	.bashrc.d/git-completion.bash	/^_git_stash ()$/;"	f
_git_status	.bashrc.d/git-completion.bash	/^_git_status ()$/;"	f
_git_submodule	.bashrc.d/git-completion.bash	/^_git_submodule ()$/;"	f
_git_svn	.bashrc.d/git-completion.bash	/^_git_svn ()$/;"	f
_git_tag	.bashrc.d/git-completion.bash	/^_git_tag ()$/;"	f
_git_whatchanged	.bashrc.d/git-completion.bash	/^_git_whatchanged ()$/;"	f
_git_worktree	.bashrc.d/git-completion.bash	/^_git_worktree ()$/;"	f
_gitk	.bashrc.d/git-completion.bash	/^_gitk ()$/;"	f
_npm_completion	.bashrc.d/npm-completion.bash	/^  _npm_completion () {$/;"	f
_npm_completion	.bashrc.d/npm-completion.bash	/^  _npm_completion() {$/;"	f
_rclone	.bashrc.d/rclone-complete.bash	/^_rclone()$/;"	f
_rclone_authorize	.bashrc.d/rclone-complete.bash	/^_rclone_authorize()$/;"	f
_rclone_cachestats	.bashrc.d/rclone-complete.bash	/^_rclone_cachestats()$/;"	f
_rclone_cat	.bashrc.d/rclone-complete.bash	/^_rclone_cat()$/;"	f
_rclone_check	.bashrc.d/rclone-complete.bash	/^_rclone_check()$/;"	f
_rclone_cleanup	.bashrc.d/rclone-complete.bash	/^_rclone_cleanup()$/;"	f
_rclone_config	.bashrc.d/rclone-complete.bash	/^_rclone_config()$/;"	f
_rclone_config_create	.bashrc.d/rclone-complete.bash	/^_rclone_config_create()$/;"	f
_rclone_config_delete	.bashrc.d/rclone-complete.bash	/^_rclone_config_delete()$/;"	f
_rclone_config_dump	.bashrc.d/rclone-complete.bash	/^_rclone_config_dump()$/;"	f
_rclone_config_edit	.bashrc.d/rclone-complete.bash	/^_rclone_config_edit()$/;"	f
_rclone_config_file	.bashrc.d/rclone-complete.bash	/^_rclone_config_file()$/;"	f
_rclone_config_password	.bashrc.d/rclone-complete.bash	/^_rclone_config_password()$/;"	f
_rclone_config_providers	.bashrc.d/rclone-complete.bash	/^_rclone_config_providers()$/;"	f
_rclone_config_show	.bashrc.d/rclone-complete.bash	/^_rclone_config_show()$/;"	f
_rclone_config_update	.bashrc.d/rclone-complete.bash	/^_rclone_config_update()$/;"	f
_rclone_copy	.bashrc.d/rclone-complete.bash	/^_rclone_copy()$/;"	f
_rclone_copyto	.bashrc.d/rclone-complete.bash	/^_rclone_copyto()$/;"	f
_rclone_cryptcheck	.bashrc.d/rclone-complete.bash	/^_rclone_cryptcheck()$/;"	f
_rclone_cryptdecode	.bashrc.d/rclone-complete.bash	/^_rclone_cryptdecode()$/;"	f
_rclone_dbhashsum	.bashrc.d/rclone-complete.bash	/^_rclone_dbhashsum()$/;"	f
_rclone_dedupe	.bashrc.d/rclone-complete.bash	/^_rclone_dedupe()$/;"	f
_rclone_delete	.bashrc.d/rclone-complete.bash	/^_rclone_delete()$/;"	f
_rclone_genautocomplete	.bashrc.d/rclone-complete.bash	/^_rclone_genautocomplete()$/;"	f
_rclone_genautocomplete_bash	.bashrc.d/rclone-complete.bash	/^_rclone_genautocomplete_bash()$/;"	f
_rclone_genautocomplete_zsh	.bashrc.d/rclone-complete.bash	/^_rclone_genautocomplete_zsh()$/;"	f
_rclone_gendocs	.bashrc.d/rclone-complete.bash	/^_rclone_gendocs()$/;"	f
_rclone_listremotes	.bashrc.d/rclone-complete.bash	/^_rclone_listremotes()$/;"	f
_rclone_ls	.bashrc.d/rclone-complete.bash	/^_rclone_ls()$/;"	f
_rclone_lsd	.bashrc.d/rclone-complete.bash	/^_rclone_lsd()$/;"	f
_rclone_lsf	.bashrc.d/rclone-complete.bash	/^_rclone_lsf()$/;"	f
_rclone_lsjson	.bashrc.d/rclone-complete.bash	/^_rclone_lsjson()$/;"	f
_rclone_lsl	.bashrc.d/rclone-complete.bash	/^_rclone_lsl()$/;"	f
_rclone_md5sum	.bashrc.d/rclone-complete.bash	/^_rclone_md5sum()$/;"	f
_rclone_mkdir	.bashrc.d/rclone-complete.bash	/^_rclone_mkdir()$/;"	f
_rclone_mount	.bashrc.d/rclone-complete.bash	/^_rclone_mount()$/;"	f
_rclone_move	.bashrc.d/rclone-complete.bash	/^_rclone_move()$/;"	f
_rclone_moveto	.bashrc.d/rclone-complete.bash	/^_rclone_moveto()$/;"	f
_rclone_ncdu	.bashrc.d/rclone-complete.bash	/^_rclone_ncdu()$/;"	f
_rclone_obscure	.bashrc.d/rclone-complete.bash	/^_rclone_obscure()$/;"	f
_rclone_purge	.bashrc.d/rclone-complete.bash	/^_rclone_purge()$/;"	f
_rclone_rc	.bashrc.d/rclone-complete.bash	/^_rclone_rc()$/;"	f
_rclone_rcat	.bashrc.d/rclone-complete.bash	/^_rclone_rcat()$/;"	f
_rclone_rmdir	.bashrc.d/rclone-complete.bash	/^_rclone_rmdir()$/;"	f
_rclone_rmdirs	.bashrc.d/rclone-complete.bash	/^_rclone_rmdirs()$/;"	f
_rclone_serve	.bashrc.d/rclone-complete.bash	/^_rclone_serve()$/;"	f
_rclone_serve_http	.bashrc.d/rclone-complete.bash	/^_rclone_serve_http()$/;"	f
_rclone_serve_restic	.bashrc.d/rclone-complete.bash	/^_rclone_serve_restic()$/;"	f
_rclone_serve_webdav	.bashrc.d/rclone-complete.bash	/^_rclone_serve_webdav()$/;"	f
_rclone_sha1sum	.bashrc.d/rclone-complete.bash	/^_rclone_sha1sum()$/;"	f
_rclone_size	.bashrc.d/rclone-complete.bash	/^_rclone_size()$/;"	f
_rclone_sync	.bashrc.d/rclone-complete.bash	/^_rclone_sync()$/;"	f
_rclone_touch	.bashrc.d/rclone-complete.bash	/^_rclone_touch()$/;"	f
_rclone_tree	.bashrc.d/rclone-complete.bash	/^_rclone_tree()$/;"	f
_rclone_version	.bashrc.d/rclone-complete.bash	/^_rclone_version()$/;"	f
background	.termux/colors.properties	/^background: #1d2021$/;"	k
c	.ipython/profile_default/ipython_config.py	/^c = get_config()$/;"	v
c	.jupyter/jupyter_notebook_config.py	/^c = get_config()$/;"	v
color0	.termux/colors.properties	/^color0:  #282828$/;"	k
color1	.termux/colors.properties	/^color1:  #cc241d$/;"	k
color10	.termux/colors.properties	/^color10: #b8bb26$/;"	k
color11	.termux/colors.properties	/^color11: #fabd2f$/;"	k
color12	.termux/colors.properties	/^color12: #83a598$/;"	k
color13	.termux/colors.properties	/^color13: #d3869b$/;"	k
color14	.termux/colors.properties	/^color14: #8ec07c$/;"	k
color15	.termux/colors.properties	/^color15: #ebdbb2/;"	k
color2	.termux/colors.properties	/^color2:  #98971a$/;"	k
color3	.termux/colors.properties	/^color3:  #d79921$/;"	k
color4	.termux/colors.properties	/^color4:  #458588$/;"	k
color5	.termux/colors.properties	/^color5:  #b16286$/;"	k
color6	.termux/colors.properties	/^color6:  #689d6a$/;"	k
color7	.termux/colors.properties	/^color7:  #a89984$/;"	k
color8	.termux/colors.properties	/^color8:  #928374$/;"	k
color9	.termux/colors.properties	/^color9:  #fb4934$/;"	k
commands=	.bashrc.d/rclone-complete.bash	/^            commands=()$/;"	f
commands=	.bashrc.d/rclone-complete.bash	/^      commands=()$/;"	f
commands=	.bashrc.d/rclone-complete.bash	/^    commands=()$/;"	f
cwd	bin/mv_to_repo.py	/^    cwd = Path.cwd()$/;"	v
definition	.bashrc.d/git-completion.bash	/^		\\(\\))   : skip parens of shell function definition ;;$/;"	f
file	bin/termux-urls.ipy	/^    file = "web_page.txt"  # fix hard coded nonsense$/;"	v
filename	.ipython/profile_default/startup/05_log.py	/^filename = os.path.join(ldir, fname) $/;"	v
flags=	.bashrc.d/rclone-complete.bash	/^    flags=()$/;"	f
flags=	.bashrc.d/rclone-complete.bash	/^    local flags=()$/;"	f
flags_completion=	.bashrc.d/rclone-complete.bash	/^    flags_completion=()$/;"	f
flags_completion=	.bashrc.d/rclone-complete.bash	/^    local flags_completion=()$/;"	f
flags_with_completion=	.bashrc.d/rclone-complete.bash	/^    flags_with_completion=()$/;"	f
flags_with_completion=	.bashrc.d/rclone-complete.bash	/^    local flags_with_completion=()$/;"	f
fname	.ipython/profile_default/startup/05_log.py	/^fname = 'log-' + ip.profile + '-' + strftime('%Y-%m-%d') + ".py" $/;"	v
foreground	.termux/colors.properties	/^foreground: #ebdbb2$/;"	k
format	.config/pip/pip.conf	/^format=freeze$/;"	k	section:list
g:NERDTreeWinPos	.vim/vimrc	/^let g:NERDTreeWinPos = "right"$/;"	v
g:flake8_show_in_gutter	.vim/vimrc	/^let g:flake8_show_in_gutter=1$/;"	v
g:flake8_show_quickfix	.vim/vimrc	/^let g:flake8_show_quickfix=0$/;"	v
g:ft_man_folding_enable	.vim/vimrc	/^let g:ft_man_folding_enable = 0$/;"	v
g:jedi#popup_on_dot	.vim/vimrc	/^let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#smart_auto_mappings	.vim/vimrc	/^let g:jedi#smart_auto_mappings = 0$/;"	v
g:nerdtree_tabs_autoclose	.vim/vimrc	/^let g:nerdtree_tabs_autoclose = 1$/;"	v
g:nerdtree_tabs_meaningful_tab_names	.vim/vimrc	/^let g:nerdtree_tabs_meaningful_tab_names = 1$/;"	v
g:nerdtree_tabs_no_startup_for_diff	.vim/vimrc	/^let g:nerdtree_tabs_no_startup_for_diff = 1$/;"	v
g:nerdtree_tabs_open_on_console_startup	.vim/vimrc	/^let g:nerdtree_tabs_open_on_console_startup = 1 $/;"	v
g:nerdtree_tabs_smart_startup_focus	.vim/vimrc	/^let g:nerdtree_tabs_smart_startup_focus = 1$/;"	v
g:nerdtree_tabs_startup_cd	.vim/vimrc	/^let g:nerdtree_tabs_startup_cd = 1$/;"	v
g:vimwiki_hl_cb_checked	.vim/vimrc	/^let g:vimwiki_hl_cb_checked = 1$/;"	v
g:vimwiki_list	.vim/vimrc	/^let g:vimwiki_list = [{'path': '~\/vimwiki\/', 'auto_toc': 1}]$/;"	v
g:vimwiki_use_mouse	.vim/vimrc	/^let g:vimwiki_use_mouse = 1$/;"	v
home	bin/mv_to_repo.py	/^    home = Path.home()$/;"	v
home	bin/symlink_repo.py	/^home = os.path.join(os.path.expanduser("~"), "")$/;"	v
inputted	bin/mv_to_repo.py	/^    inputted = sys.argv[1] if len(sys.argv) else print("Takes one filename.")$/;"	v
ip	.ipython/profile_default/startup/05_log.py	/^ip = get_ipython() $/;"	v
ldir	.ipython/profile_default/startup/05_log.py	/^ldir = ip.profile_dir.log_dir $/;"	v
link	bin/termux-urls.ipy	/^link = sys.argv[1]$/;"	v
link_parser	bin/termux-urls.ipy	/^link_parser = urllib.parse.urlparse(link)$/;"	v
list	.config/pip/pip.conf	/^[list]$/;"	s
local_nonpersistent_flags=	.bashrc.d/rclone-complete.bash	/^    local local_nonpersistent_flags=()$/;"	f
local_nonpersistent_flags=	.bashrc.d/rclone-complete.bash	/^    local_nonpersistent_flags=()$/;"	f
main	.vim/skeleton.py	/^def main():$/;"	f
main	bin/mv_to_repo.py	/^def main(rel_file):$/;"	f
main	bin/symlink_repo.py	/^def main():$/;"	f
mapleader	.vim/vimrc	/^let mapleader = "\\<Space>"$/;"	v
must_have_one_flag=	.bashrc.d/rclone-complete.bash	/^        must_have_one_flag=()$/;"	f
must_have_one_flag=	.bashrc.d/rclone-complete.bash	/^    local must_have_one_flag=()$/;"	f
must_have_one_flag=	.bashrc.d/rclone-complete.bash	/^    must_have_one_flag=()$/;"	f
must_have_one_noun=	.bashrc.d/rclone-complete.bash	/^        must_have_one_noun=()$/;"	f
must_have_one_noun=	.bashrc.d/rclone-complete.bash	/^    local must_have_one_noun=()$/;"	f
must_have_one_noun=	.bashrc.d/rclone-complete.bash	/^    must_have_one_noun=()$/;"	f
notnew	.ipython/profile_default/startup/05_log.py	/^notnew = os.path.exists(filename) $/;"	v
noun_aliases=	.bashrc.d/rclone-complete.bash	/^    noun_aliases=()$/;"	f
nouns=	.bashrc.d/rclone-complete.bash	/^    local nouns=()$/;"	f
python_highlight_all	.vim/vimrc	/^let python_highlight_all = 1$/;"	v
rel_file	bin/mv_to_repo.py	/^    rel_file = Path.joinpath(rel_path, src)$/;"	v
rel_path	bin/mv_to_repo.py	/^    rel_path = Path.relative_to(cwd, home)$/;"	v
repo	bin/mv_to_repo.py	/^    repo = Path.joinpath(home, "projects", "dotfiles", "unix", "")$/;"	v
repo	bin/symlink_repo.py	/^repo = os.path.join(home, "projects", "dotfiles", "unix", "")$/;"	v
src	bin/mv_to_repo.py	/^    src = Path(inputted)$/;"	v
svn_remote=	.bashrc.d/git-prompt.sh	/^	svn_remote=()$/;"	f
symlink_repo	bin/symlink_repo.py	/^def symlink_repo(file):$/;"	f
two_word_flags=	.bashrc.d/rclone-complete.bash	/^    local two_word_flags=()$/;"	f
two_word_flags=	.bashrc.d/rclone-complete.bash	/^    two_word_flags=()$/;"	f
ytdl	bin/termux-urls.ipy	/^def ytdl(link):$/;"	f
