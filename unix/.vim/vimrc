""""""""""""""""""""""""""""""""
" My Personal Vimrc            "
" Maintainer:   Faris Chugthai "
""""""""""""""""""""""""""""""""

" TABLE OF CONTENTS
""""""""""""""""""""""""""""""""
" Vundle, Plugins and Other Sourced Files
" Filetype Specific Options
"   Python
"   IPython
"   Web Dev
"   Markdown
" Global Options
"   Leader
"   Viminfo
" Buffers, Windows, and Tabs
" Mappings
" Plugin Configurations
"   Built-In
"   Vundle
"   NERDTree
"   NERDTree Tabs
"   Jedi
"   Vimwiki
"   Fugitive
"   Tagbar
"   Flake8
"""""""""""""""""""""""""""""""""
"
"
" Vundle, Plugins and Other Sourced Files
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdTree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'altercation/vim-colors-solarized'
Plugin 'davidhalter/jedi-vim'
Plugin 'vimwiki/vimwiki'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
Plugin 'nvie/vim-flake8'
Plugin 'w0rp/ale'

call vundle#end()            " required
filetype plugin indent on    " required

" currently using the local file for colorschemes and powerline.
" WSL has very inconsistent colorschemes for sh and Vim
if filereadable(glob("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif

" Common abbreviations / misspellings 
if filereadable(glob("~/.vim/autocorrect.vim"))
    source ~/.vim/autocorrect.vim
endif

"Add a Vim cheat sheet with
"git clone https://github.com/lifepillar/vim-cheat40.git ~/.vim/pack/bundle/start/cheat40


" Filetype Specific Options:
" Python:
"
"
" Insert a relevant header automatically for every new *.py file
au BufNewFile *.py,*.ipy 0r ~/.vim/skeleton.py

" Found in :he skeleton
" How to automatically update a line with the date the file was last modified.
" Requires a line 'LAST MODIFIED: <date time>' in the first 20 lines
autocmd BufWritePre,FileWritePre *.py,*.ipy   ks|call LastMod()|'s


fun LastMod()
    if line("$") > 20
        let l = 20
    else
        let l = line("$")
    endif
    exe "1," . l . "g/LAST MODIFIED: /s/LAST MODIFIED: .*/LAST MODIFIED: " .
  \ strftime("%Y %b %d")
endfun


" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
" Number of spaces that a <Tab> counts for while performing editing
" operations, like inserting a <Tab> or using <BS>.
set softtabstop=4
" 80 characters before the line wraps
set textwidth=80
" enable all Python syntax highlighting features
let python_highlight_all = 1


" IPython:
"
"
au BufRead,BufNewFile *.ipy setlocal filetype=python


" Web Dev:
"
"
au filetype javascript,html,css setlocal shiftwidth=2 softtabstop=2 tabstop=2

" TODO: Make skeleton template for JavaScript
au BufWritePre,FileWritePre *.js ks|call LastMod()|'s

" Markdown:
"
"
"gvim requires an additional BufFilePre in the autocommand line for Markdown file type recognition with the Save Asâ€¦ :sav command
autocmd BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown


" Global Options:
" If you want to review all options at once, run :set"

" Leader:
let mapleader = "\<Space>"

" select all text in buffer 
map <Leader>a ggVG

" Viminfo: 
" in order we go:
" '500 : marks will be remembered for the last 500 files
" <1000 : Contents of registers up to 1000 lines each will be recorded
" s1000 : Reigsters with more than 1000 Kbyte are not
" put the viminfo file im the standard .vim dir
set viminfo='500,<1000,s1000,n$HOME/.vim/viminfo


" cursorline. add a line underneath where your cursor is.
set cul
" shows the name of the file in the window title
" also doesn't appear to work when vim is launched from tmux
set title
"lets colorize the 80 char line for you
set colorcolumn=+1
" make the command line 2 lines high
set ch=2
" Switch on search pattern highlighting.
set hlsearch
" show line and column number
set ruler
" Give backspaces seemingly obvious behavior.
set backspace=indent,eol,start
" show (partial) command in status line
set showcmd
" show number lines on the left
set number
" show matching brackets
set showmatch
" do case insensitive matching
set ignorecase
" do smart autoindenting when starting a new line
set smartindent
" at <TAB> at beginning line inserts spaces set in shiftwidth
set smarttab
" they're annoying
set noswapfile
" simple is better than complex
set mouse=a

" Use the system clipboard. From vim-better-default
if has('unnamedplus')
  set clipboard=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif

" Store in unix format to prevent conversion issues when checking into github
" And be aware that that does happen! just ran into it on Windows 10 Subsystem
set fileformat=unix
set encoding=utf-8

" Tab completion
set wildmenu
" fileignorecase ignores case usage in files.
" wildignorecase does this but only for autocompletions
set fileignorecase
set wildmode=list,full
set display+=lastline

set incsearch
set history=1000
set tabpagemax=50

set sessionoptions-=options

" don't ring or make noise
set noerrorbells

"more characters are sent to the screen for redrawing instead of using
"insert/delete line commands. this makes Vim seem smoother
set ttyfast

" which wrap allows hitting the right key and going to the next line
set whichwrap+=<,>,h,l,[,]


" Syntax Highlighting:
"if we can have syntax recognition,this has to come after the colorscheme
if has("syntax")
    syntax on
endif

" set modelines to enable syntax highlighting even when the filename differs
" heres an example of a modeline
" /* vim: set syntax=md : */
set modeline

if has('persistent_undo')
    "set undofile	" keep an undo file (undo changes after closing)
    "line 300 of :he undo is 'You should keep undofile off'
    set undodir+=~/.vim/undodir
endif


" Buffers Windows Tabs:
"look to see if a buffer is open before opening a new one
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

"modified buffers are hidden and multiple buffers can be worked on without
"forcing the user to save
set hidden
"if i change a file in a different window, reload it
set autoread
" Opening a window will place it below the current one
set splitbelow
" If vertical split is invoked put it on the right
set splitright
" Last window gets a status line
set laststatus=2
" Set column width of 120. NERDTree fits in a 40 char block perfectly
set columns=120
"Also if you want standard POSIX windows here is an option to enable that
"set lines=24


" Mappings:
" Easy window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" If running a terminal in Vim, go into Normal mode with Esc
tnoremap <Esc> <C-W>N


" Plugin Configuration:
" Builtins:
"
"
" Let Vim open manpages with ex cmd
" :Man [cmd]
" From /usr/share/vim/vim80/doc/usr_12.txt
" Invoke while in Vim by putting your cursor over a word and run \K
runtime! ftplugin/man.vim

" from filetype line 590
let g:ft_man_folding_enable = 0

" filetype 596
set keywordprg=:Man

"Thanks tpope!
" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif


" Vundle:
" from: https://github.com/VundleVim/Vundle.vim/blob/master/README.md 
" if you need to reinstall, run these commands
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
"Use git:// instead of https
"let g:vundle_default_git_proto = 'git'


" NERDTree:
"https://github.com/scrooloose/nerdtree
"
"Open NERDTree automatically
autocmd Vimenter * NERDTree

" If Vim is opened with a file name as an argument, focus on the file
autocmd VimEnter * wincmd w

" How can I open a NERDTree automatically when vim starts up if no files were specified?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"How can I open NERDTree automatically when vim starts up on opening a directory?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

"Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"Close NERDTree if you open a file
let NERDTReeQuitOnOpen = 1

" Other recommended options
let NERDTreeDirArrows = 1
let g:NERDTreeWinPos = "right"
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1


" NERDTree Tabs:
" Do not open NERDTree if vim starts in diff mode
let g:nerdtree_tabs_no_startup_for_diff = 1

" On startup - focus NERDTree when opening a directory, focus the file if 
" editing a specified file. When set to `2`, always focus file after startup.
let g:nerdtree_tabs_smart_startup_focus = 1

" Unfocus NERDTree when leaving a tab for descriptive tab names
let g:nerdtree_tabs_meaningful_tab_names = 1

" Close current tab if there is only one window in it and it's NERDTree
let g:nerdtree_tabs_autoclose = 1


" Jedi:
" Great out of the box except for the import autofill
" https://github.com/davidhalter/jedi-vim
" jedi-vim is a vim binding to the autocompletion library jedi
"
" When you start typing `from module.name<space>` jedi-vim automatically
" adds the "import" statement and displays the autocomplete popup.
let g:jedi#smart_auto_mappings = 0

" if the autocomplete on dot slows things down too much try
" let g:jedi#popup_on_dot = 0


" Vimwiki:
let g:vimwiki_hl_cb_checked=1
let g:vimwiki_list = [{'path': '~/vimwiki/', 'auto_toc': 1}]


" Fugitive:
" The following optioms clean up our statusline
if exists('g:loaded_fugitive')
   set statusline=%f\ %m\ (%L\ lines)\ %r\ %=%{fugitive#statusline()}\ (%l,%c)\ %y
else
   set statusline=%f\ %m\ (%L\ lines)\ %r\ %=(%l,%c)\ %y
endif


" Tagbar:
nmap <F8> :TagbarToggle<CR>


" Flake8:
"https://github.com/nvie/vim-flake8
"flake8 is a static syntax and style checker. wraps around pyflakes, pep8 and
"ned's MacCabe script [complexity checker]
"
" Open a Python file
" Press <F7> to run flake8 on it
let g:flake8_show_quickfix=0
let g:flake8_show_in_gutter=1
autocmd BufReadPost *.py call Flake8()
