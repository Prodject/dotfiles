" vimrc
" vim configuration
" Maintainer: Faris Chugthai
" 
set nocompatible

" Poop if ~/.vim/autoload doesn't exist as a folder then this fails silently
if !filereadable('~/.vim/autoload/plug.vim')
    call system('wget -O ~/.vim/autoload/plug.vim 
                \ http://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
    " normal PlugInstall +UpdateRemotePlugins :clo
endif

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/seoul256.vim'
Plug 'scrooloose/nerdTree',
Plug 'scrooloose/nerdcommenter'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'davidhalter/jedi-vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'nvie/vim-flake8'
Plug 'w0rp/ale'
Plug 'godlygeek/tabular'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'autozimu/LanguageClient-neovim', {'do': 'bash install.sh'} 
Plug 'maximbaz/lightline-ale'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ryanoasis/vim-devicons'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'


call plug#end()

if filereadable(glob('~/.vim/vimrc.local'))
    source ~/.vim/vimrc.local
endif

if filereadable(glob('~/.vim/autocorrect.vim'))
    source ~/.vim/autocorrect.vim
endif

" Filetype Specific Options:
" IPython:
au BufRead,BufNewFile *.ipy setlocal filetype=python

" Web Dev:
au filetype javascript,html,css setlocal shiftwidth=2 softtabstop=2 tabstop=2

" Markdown:
autocmd BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown

" Leader:
let g:mapleader = '\<Space>'

" Viminfo:
" Also don't let neovim and vim use the same viminfo file
if !has('nvim')
    set viminfo='100,<200,s200,n$HOME/.vim/viminfo
endif


" Pep8 Global Options: 
set tabstop=4                   " show existing tab with 4 spaces width
set shiftwidth=4                " when indenting with '>', use 4 spaces width
set expandtab                   " On pressing tab, insert 4 spaces
set softtabstop=4
let g:python_highlight_all = 1


" Spell Checker:
set spelllang=en

if !has('nvim')
    set spelllang+=$VIMRUNTIME/spell/en.utf-8.spl
endif

set complete+=kspell                    " Autocomplete in insert mode

set spellsuggest=5                      " Limit the number of suggestions from 'spell suggest'

map <Leader>s :setlocal spell!<CR>

if isdirectory('/usr/share/dict/')
    set dictionary+=/usr/share/dict/words
endif


set cursorline
set colorcolumn=+1
set cmdheight=2
set hlsearch
set ruler
set backspace=indent,eol,start
set showcmd
set number
set showmatch
set ignorecase
set smartindent
set smarttab
set noswapfile
set mouse=a
if has('unnamedplus')
  set clipboard+=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif
set fileformat=unix
set encoding=utf-8
set wildmenu
set wildmode=longest,list:longest
set complete+=.,b,u,t
set fileignorecase
set display+=lastline
set incsearch

set history=1000

set sessionoptions-=options
set noerrorbells
"insert/delete line commands. this makes Vim seem smoother
set ttyfast
set whichwrap+=<,>,h,l,[,]

if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile	" keep an undo file (undo changes after closing)
endif
set nojoinspaces

if has('syntax')
    syntax on
endif

set modeline
"look to see if a buffer is open before opening a new one
try
  set switchbuf=useopen,usetab,newtab
  set showtabline=2
catch
endtry
"forcing the user to save
set hidden
set autoread
set splitbelow
set splitright
set laststatus=2
set tabpagemax=50
" Easy window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" If running a terminal in Vim, go into Normal mode with Esc
tnoremap <Esc> <C-W>N

" select all text in buffer 
map <Leader>a ggVG

" Map :NERDTreeTabsToggle to ease toggling the plugin
map <Leader>n <plug>NERDTreeMirrorToggle<CR>
" Invoke while in Vim by putting your cursor over a word and run [Leader]K
runtime! ftplugin/man.vim
let g:ft_man_folding_enable = 0
set keywordprg=:Man

"Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTReeQuitOnOpen = 1
let g:NERDTreeDirArrows = 1
let g:NERDTreeWinPos = 'right'
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeNaturalSort = 1
let g:NERDTreeChDirMode = 2
let g:NERDTreeShowLineNumbers=1
" Do not open NERDTree if vim starts in diff mode
let g:nerdtree_tabs_no_startup_for_diff = 1
let g:nerdtree_tabs_meaningful_tab_names = 1
let g:nerdtree_tabs_autoclose = 1
" When starting up with a directory name as a parameter, cd into it
let g:nerdtree_tabs_startup_cd = 1


" Jedi:
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#usages_command=0             "Jedi clobbers me toggling NERDTree!
let g:jedi#use_tabs_not_buffers=1           " easy to maintain workspaces

" Tagbar:
nmap <F8> :TagbarToggle<CR>

" Flake8
" https://github.com/nvie/vim-flake8
let g:flake8_show_quickfix=0
let g:flake8_show_in_gutter=1

" Ale
nmap <Leader>l <Plug>(ale_toggle_buffer)

" Gruvbox
"https://github.com/morhetz/gruvbox/wiki/Configuration#ggruvbox_contrast_dark
let g:gruvbox_contrast_dark = 'hard'

" Lightline:
let g:lightline = {
			\ 'active': {
			\   'left': [ [ 'mode', 'paste' ],
			\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
			\ },
			\ 'component_function': {
			\   'gitbranch': 'fugitive#head'
			\ },
			\ }

let g:lightline.colorscheme = 'seoul256'

" Language Servers:
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'python': ['pyls'],
    \ 'sh': ['bash-language-server', 'start']
    \ }
