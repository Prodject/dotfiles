" vimrc
" Maintainer: Faris Chugthai

" Full fold: {{{1
" Gonna start seriously consolidating vimrc and init.vim this is so hard
" to maintain
" Let's setup all the global vars we need
" Wait am i assigning these vars correctly? man fuck vimscript

if has('nvim')
    let g:root = '~/.config/nvim'
    let g:conf = '~/.config/nvim/init.vim'
else
    let g:root = '~/.vim'
    let g:conf = '~/.vim/vimrc'
endif
" Vim-plug {{{2
if !filereadable('~/.vim/autoload/plug.vim')
    call system('wget -O ~/.vim/autoload/plug.vim
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
endif

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdTree',
Plug 'scrooloose/nerdcommenter'
Plug 'davidhalter/jedi-vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'morhetz/gruvbox'
Plug 'autozimu/LanguageClient-neovim', {'do': 'bash install.sh'}
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-markdown', { 'for': ['md', 'markdown'] }
Plug 'ryanoasis/vim-devicons'

if !has('nvim')
"    Plug 'roxma/nvim-yarp' swear this doesn't do anything
    Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()

if filereadable(glob('~/.vim/vimrc.local'))
    source ~/.vim/vimrc.local
endif

if filereadable(glob('~/.vim/autocorrect.vim'))
    source ~/.vim/autocorrect.vim
endif

" Filetype Specific Options:{{{2
" IPython:
au BufRead,BufNewFile *.ipy setlocal filetype=python

" Web Dev:
au filetype javascript,html,css setlocal shiftwidth=2 softtabstop=2 tabstop=2

" Markdown:
autocmd BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown
" }}}
" Global Options: {{{2
" Leader:
let g:mapleader = "\<Space>"

" Viminfo:
" Also don't let neovim and vim use the same viminfo file
if !has('nvim')
    set viminfo='100,<200,s200,n$HOME/.vim/viminfo
endif

" Pep8 Global Options: 
set tabstop=4                   " show existing tab with 4 spaces width
set shiftwidth=4                " when indenting with '>', use 4 spaces width
set expandtab                   " On pressing tab, insert 4 spaces
set softtabstop=4
let g:python_highlight_all = 1


" Spell Checker:{{{3
set encoding=utf-8
set spelllang=en
set spelllang+=$VIMRUNTIME/spell/en.utf-8.spl
set complete+=kspell                    " Autocomplete in insert mode
set spellsuggest=5                      " Limit the number of suggestions from 'spell suggest'
map <Leader>s :setlocal spell!<CR>

if filereadable('/usr/share/dict/words')
    setlocal dictionary+=/usr/share/dict/words
    " Replace the default dictionary completion with fzf-based fuzzy completion 
    inoremap <expr> <c-x><c-k> fzf#complete('cat /usr/share/dict/words')
endif

if filereadable('/usr/share/dict/american-english')
    setlocal dictionary+=/usr/share/dict/american-english
endif
" }}}

" Folds:
set foldenable
set foldlevelstart=10               " Enables most folds
set foldnestmax=5                   " Why would anything be folded this much
set foldmethod=indent               " Gotta love Python

set tags+=./tags,./../tags,./*/tags      " usr_29
set cursorline
set cmdheight=2
set colorcolumn=+1
set hlsearch
set ruler
set backspace=indent,eol,start
set showcmd
set number
set showmatch
set ignorecase
set smartindent
set smarttab
set noswapfile
set guifont='Fira\ Code\ Mono:h11'
set path+=**        			" Make autocomplete for filenames work
set autochdir
set mouse=a
if has('unnamedplus')
  set clipboard+=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif
set fileformat=unix
set wildmenu
set wildmode=longest,list:longest
set wildignore+=*.a,*.o,*.pyc,*~,*.swp,*.tmp
set complete+=.,b,u,t
set fileignorecase
set display+=lastline
set incsearch

set history=1000

set sessionoptions-=options
set noerrorbells
"insert/delete line commands. this makes Vim seem smoother
set ttyfast
set whichwrap+=<,>,h,l,[,]

if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile	" keep an undo file (undo changes after closing)
endif
set nojoinspaces

if has('syntax')
    syntax on
endif

set modeline
"look to see if a buffer is open before opening a new one
try
  set switchbuf=useopen,usetab,newtab
  set showtabline=2
catch
endtry

set hidden
set autoread
set splitbelow
set splitright
set laststatus=2
set tabpagemax=50

" Easy window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" If running a terminal in Vim, go into Normal mode with Esc
tnoremap <Esc> <C-W>N

" select all text in buffer 
map <Leader>a ggVG

" Map :NERDTreeTabsToggle to ease toggling the plugin
map <Leader>n <plug>NERDTreeMirrorToggle<CR>
" Invoke while in Vim by putting your cursor over a word and run [Leader]K
runtime! ftplugin/man.vim
let g:ft_man_folding_enable = 0
set keywordprg=:Man

" fzf: {{{
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" }}}

" NERDTree: {{{
" If only NERDTree is open, close Vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeQuitOnOpen = 1            " If only NERDTree is open, close Vim
let g:NERDTreeDirArrows = 1
let g:NERDTreeWinPos = 'right'
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeNaturalSort = 1
let g:NERDTreeChDirMode = 2         " change cwd every time NT root changes
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeMouseMode = 2         " open dir on mouse click
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '__pycache__$']
let g:NERDTreeRespectWildIgnore = 1

" NERDCom:
let g:NERDSpaceDelims = 1       " can we give the code some room to breathe?
let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters flush left
let g:NERDTrimTrailingWhitespace = 1 " Trim trailing whitespace when uncommenting
" }}}
" Jedi:
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#use_tabs_not_buffers = 1           " easy to maintain workspaces

" Fugitive: {{{
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gE :Gedit<space>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gR :Gread<space>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gW :Gwrite!<CR>
nnoremap <silent> <leader>gq :Gwq<CR>
nnoremap <silent> <leader>gQ :Gwq!<CR>
" }}}

" Flake8:
" https://github.com/nvie/vim-flake8
let g:flake8_show_quickfix = 0
let g:flake8_show_in_gutter = 1

" Ale:
nmap <Leader>l <Plug>(ale_toggle_buffer) <CR>

" Gruvbox:
"https://github.com/morhetz/gruvbox/wiki/Configuration#ggruvbox_contrast_dark
let g:gruvbox_contrast_dark = 'hard'

" Language Servers:
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'python': ['pyls'],
    \ 'sh': ['bash-language-server', 'start']
    \ }
" Devicons:
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
" }}}
" }}}
" Vim: set foldmethod=marker :
