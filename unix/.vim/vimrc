" vimrc
" vim configuration
" Maintainer: Faris Chugthai

setlocal foldlevel=1
" All: {{{ 1

" About: {{{ 2
let g:snips_author = 'Faris Chugthai'
let g:snips_email = 'farischugthai@gmail.com'
let g:snips_github = 'https://github.com/farisachugthai'
" }}}

" Vim Plug: {{{ 2

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdTree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'davidhalter/jedi-vim', { 'for': ['python', 'python3'] }
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'w0rp/ale'
Plug 'morhetz/gruvbox'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ryanoasis/vim-devicons'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'mhinz/vim-startify'

call plug#end()
" }}}

" Vim Specific: {{{ 2
set background=dark                 " set as early as possible

if filereadable(glob("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif

if filereadable(glob("~/.vim/autocorrect.vim"))
    source ~/.vim/autocorrect.vim
endif

" }}}

" Filetype Specific Options: {{{ 2
" IPython:
au BufRead,BufNewFile *.ipy setlocal filetype=python
" Web Dev:
au filetype javascript,html,css setlocal shiftwidth=2 softtabstop=2 tabstop=2
" Markdown:
autocmd BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown
" }}}

" Global Options: {{{ 2
" Leader:
let g:mapleader = "\<Space>"

" Viminfo:
" Also don't let neovim and vim use the same viminfo file
if !has('nvim')
    set viminfo='100,<200,s200,n$HOME/.vim/viminfo
endif

" Pep8 Global Options: {{{ 3
set tabstop=4                 " show existing tab with 4 spaces width
set shiftwidth=4                " when indenting with '>', use 4 spaces width
set expandtab                   " On pressing tab, insert 4 spaces
set softtabstop=4
let g:python_highlight_all = 1
" }}}

" Folds: {{{ 3
set foldenable
set foldlevelstart=1                 " Enables most folds
set foldnestmax=10                   " Why would anything be folded this much
set foldmethod=marker
" }}}

" Buffers Windows Tabs: {{{ 3
try
  set switchbuf=useopen,usetab,newtab
  set showtabline=2
catch
endtry
set hidden
set splitbelow
set splitright
" }}}

" Spell Checker: {{{ 3
set encoding=UTF-8             " Set default encoding
set fileencoding=UTF-8
set spelllang=en
" if !has('nvim')
"     set spelllang+=$VIMRUNTIME/spell/en.utf-8.spl
" endif
set spelllang+=$HOME/.config/nvim/spell/en.utf-8.spl
set spelllang+=$HOME/.config/nvim/spell/en.utf-8.add.spl
set complete+=kspell                    " Autocomplete in insert mode
set spellsuggest=5                      " Limit the number of suggestions from 'spell suggest'
nnoremap <Leader>s :setlocal spell!<CR>
" Can be set with sudo select-default-wordlist. I opted for American insane
if filereadable('/usr/share/dict/words')
    setlocal dictionary+=/usr/share/dict/words
" Replace the default dictionary completion with fzf-based fuzzy completion
    inoremap <expr> <c-x><c-k> fzf#complete('cat /usr/share/dict/words')
endif
if filereadable('/usr/share/dict/american-english')
    setlocal dictionary+=/usr/share/dict/american-english
endif
if filereadable('$HOME/.config/nvim/spell/en.hun.spl')
    set spelllang+=$HOME/.config/nvim/spell/en.hun.spl
endif
" }}}

" all the nonsense nvim freed you of: {{{ 3
if !has('nvim')
    set autoread
    set autoindent
    set backspace=indent,eol,start
    set belloff=all
"    set display+=lastline,msgsep       error idk why
    set history=10000
    set hlsearch
    set incsearch
    set langnoremap
    set laststatus=2
    set noerrorbells
    set nolangremap
    set ruler
    set sessionoptions-=options
    set showcmd
    set smarttab
    set tabpagemax=50
    set ttyfast         "insert/delete line commands. this makes Vim seem smoother
endif

" - 'backupdir' defaults to .,~/.local/share/nvim/backup (|xdg|)

" oddly vim already does. why?
" - 'complete' doesn't include "i"

" - 'cscopeverbose' is enabled
" - 'directory' defaults to ~/.local/share/nvim/swap// (|xdg|), auto-created
" - 'fillchars' defaults (in effect) to "vert:│,fold:·"
" - 'formatoptions' defaults to "tcqj"
" - 'listchars' defaults to "tab:> ,trail:-,nbsp:+"
" - 'nrformats' defaults to "bin,hex"
" - 'sidescroll' defaults to 1
" - 'tags' defaults to "./tags;,tags"

" }}}

" Fun With Clipboards: {{{ 3
if has('unnamedplus')           " Use the system clipboard.
  set clipboard+=unnamed,unnamedplus
else                            " Accomodate Termux
  set clipboard+=unnamed
endif

set pastetoggle=<F7>
" }}}

" Other Global Options: {{{ 3
set tags+=./tags,./../tags,./*/tags     " usr_29
set mouse=a                             " Automatically enable mouse usage
set cursorline
set colorcolumn=+1
set cmdheight=2
set number
set showmatch
set ignorecase
set smartcase
set smartindent
set noswapfile

set fileformat=unix

if has('gui_running')
    set guifont='Fira\ Code\ Mono:11'
endif
set path+=**        			        " Recursively search files with :find
set autochdir
set wildmenu                            " Show list instead of just completing
set wildmode=longest,list:longest       " Longest string or list alternatives
set wildignore+=*.a,*.o,*.pyc,*~,*.swp,*.tmp
" are these options already set?
" set complete+=.,b,u,t                   " open buffer, open buffers, and tags
set fileignorecase
set whichwrap+=<,>,h,l,[,]              " Reasonable line wrapping
set nojoinspaces
set diffopt=vertical,context:3          " vertical split diffs. def cont is 6

if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile	" keep an undo file (undo changes after closing)
endif
set modeline

" }}}

" }}}

" Mappings: {{{ 2
" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" If running a terminal in Vim, go into Normal mode with Esc
tnoremap <Esc> <C-W>N

" select all text in buffer
nnoremap <Leader>a ggVG

" Map :NERDTreeTabsToggle to ease toggling the plugin
nnoremap <Leader>nt <plug>NERDTreeMirrorToggle<CR>

" }}}

" Plugins: {{{ 2

" Invoke while in Vim by putting your cursor over a word and run <Leader>k
runtime! ftplugin/man.vim
let g:ft_man_folding_enable = 0
setlocal keywordprg=:Man

" NERDTree: {{{ 3
"Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeDirArrows = 1
let g:NERDTreeWinPos = "right"
let NERDTreeShowHidden = 1
let NERDTreeShowBookmarks = 1
let NERDTreeNaturalSort = 1
let NERDTreeChDirMode = 1
let NERDTreeShowLineNumbers=1
let g:NERDTreeMouseMode = 2                         " Open dirs with 1 click files with 2
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '__pycache__$']
let g:NERDTreeRespectWildIgnore = 1                 " yeah i meant those ones too
" }}}

" NERDCom: {{{ 3
let g:NERDSpaceDelims = 1                           " can we give the code some room to breathe?
let g:NERDDefaultAlign = 'left'                     " Align line-wise comment delimiters flush left
let g:NERDTrimTrailingWhitespace = 1                " Trim trailing whitespace when uncommenting
" }}}

" Jedi: {{{ 3
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 1
let g:jedi#use_tabs_not_buffers=1           " easy to maintain workspaces
let g:jedi#show_call_signatures_delay = 250  " wait 50ms instead of 500 to show CS
let g:jedi#force_py_version = 3
" }}}

" Fugitive: {{{ 3
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gE :Gedit<space>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gR :Gread<space>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gW :Gwrite!<CR>
nnoremap <silent> <leader>gq :Gwq<CR>
nnoremap <silent> <leader>gQ :Gwq!<CR>
" }}}

" Ale: {{{ 3
nnoremap <Leader>l <Plug>(ale_toggle_buffer)<CR>
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
" Default: `'%code: %%s'`
let g:ale_echo_msg_format = '%linter% - %code: %%s %severity%'
let g:ale_python_flake8_options = '--config ~/.config/flake8'
let g:ale_set_signs = 1                             " what is the default
let g:ale_fixers = { '*' : [ 'remove_trailing_lines', 'trim_whitespace' ]}
" }}}

" Devicons: {{{ 3
let g:airline_powerline_fonts = 1
" }}}

" Vim_Startify: {{{ 3
let g:startify_session_sort = 1
" }}}

" Ultisnips: {{{ 3
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsSnippetDir = [ '~/.config/nvim/Ultisnips' ]
let g:UltiSnips_python_quoting_style = 'GOOGLE'
let g:UltiSnipsEnableSnipMate = 0           " isn't working at all
" }}}

" Gruvbox: {{{ 3
" https://github.com/morhetz/gruvbox/wiki/Configuration#ggruvbox_contrast_dark
" TODO: syntax is wrong but the idea is to run check before eval
" if &colorscheme=gruvbox
let g:gruvbox_contrast_dark = 'hard'
" Speed up init by saving syntax /colo for last
colorscheme gruvbox
" }}}

" }}}

" }}}
