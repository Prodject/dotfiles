""""""""""""""""""""""""""""""""
" My Personal Vimrc            "
" Maintainer:   Faris Chugthai "
""""""""""""""""""""""""""""""""

" TABLE OF CONTENTS
""""""""""""""""""""""""""""""""
" Vundle, Plugins and Other Sourced Files
" Filetype Specific Options
"   IPython
"   Web Dev
"   Markdown
" Global Options
"   Leader
"   Viminfo
"   Pep8 Global Options
"   Spell Checking
"   Other Global Options
"   Syntax Highlighting
" Buffers, Windows, and Tabs
" Mappings
" Plugin Configurations
"   Built-In
"   Cheat40
"   Vundle
"   NERDTree
"   NERDTree Tabs
"   Jedi
"   Vimwiki
"   Fugitive
"   Tagbar
"   Flake8
"   Ale
"""""""""""""""""""""""""""""""""
"
"
" Vundle, Plugins and Other Sourced Files
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdTree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'davidhalter/jedi-vim'
Plugin 'vimwiki/vimwiki'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'
Plugin 'nvie/vim-flake8'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdcommenter'
Plugin 'godlygeek/tabular'
Plugin 'joshdick/onedark.vim'
Plugin 'morhetz/gruvbox'
Plugin 'itchyny/lightline.vim'

call vundle#end()            " required
filetype plugin indent on    " required

" currently using the local file for colorschemes and powerline.
" WSL has very inconsistent colorschemes for sh and Vim
if filereadable(glob("~/.vim/vimrc.local"))
    source ~/.vim/vimrc.local
endif

" Common abbreviations / misspellings 
if filereadable(glob("~/.vim/autocorrect.vim"))
    source ~/.vim/autocorrect.vim
endif

" Filetype Specific Options:

" IPython:
au BufRead,BufNewFile *.ipy setlocal filetype=python


" Web Dev:
au filetype javascript,html,css setlocal shiftwidth=2 softtabstop=2 tabstop=2

au BufWritePre,FileWritePre *.js ks|call LastMod()|'s

" Markdown:
" See more in ftplugin/markdown.vim
" gvim requires an additional BufFilePre in the autocommand line for Markdown file type recognition with the Save Asâ€¦ :sav command
autocmd BufNewFile,BufFilePre,BufRead *.md setlocal filetype=markdown


" Global Options:
" If you want to review all options at once, run :set"


" Leader:
let mapleader = "\<Space>"


" Viminfo:
" in order we go:
" '100 : marks will be remembered for the last 500 files
" <200 : Contents of registers up to 1000 lines each will be recorded
" s200 : Registers with more than 1000 Kbyte are not
" put the viminfo file im the standard .vim dir

" Also don't let neovim and vim use the same viminfo file
if !has('nvim')
    set viminfo='100,<200,s200,n$HOME/.vim/viminfo
endif


" Pep8 Global Options: 
"
" show existing tab with 4 spaces width
set tabstop=4

" when indenting with '>', use 4 spaces width
set shiftwidth=4

" On pressing tab, insert 4 spaces
set expandtab

" Number of spaces that a <Tab> counts for while performing editing
" operations, like inserting a <Tab> or using <BS>.
set softtabstop=4

" enable all Python syntax highlighting features
let python_highlight_all = 1


" Spell Checker:
"
" Turn on spell checks either by filetype or explicit buffers. To configure:
set spelllang=en

if !has('nvim')
    set spelllang+=$VIMRUNTIME/spell/en.utf-8.spl
endif

" Autocomplete in insert mode
set complete+=kspell 

" Limit the number of suggestions from 'spell suggest'
set spellsuggest=5

" Loving this mapping. May end up saying spell checking is never on by default
map <Leader>s :setlocal spell!<CR>

" To improve insert mode completion let's add a dictionary
" Haven't found a folder with a words file on termux so this check is
" necessary
" if isdirectory("/usr/share/dict/")
    " set dictionary+=/usr/share/dict/words
" endif


" Other Global Options: 
"
" cursorline. add a line underneath where your cursor is.
set cul

"lets colorize the 80 char line for you
set colorcolumn=+1

" make the command line 2 lines high
set ch=2

" Switch on search pattern highlighting.
set hlsearch

" show line and column number
set ruler

" Give backspaces seemingly obvious behavior.
set backspace=indent,eol,start

" show (partial) command in status line
set showcmd

" show number lines on the left
set number

" show matching brackets
set showmatch

" do case insensitive matching
set ignorecase

" do smart autoindenting when starting a new line
set smartindent

" at <TAB> at beginning line inserts spaces set in shiftwidth
set smarttab

" they're annoying
set noswapfile

" simple is better than complex
set mouse=a

" Use the system clipboard. From vim-better-default
if has('unnamedplus')
  set clipboard+=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif

" Store in unix format to prevent conversion issues when checking into github
set fileformat=unix
set encoding=utf-8

" Command line autocomplete appears as a menu
set wildmenu

" Complete longest common string. If more than one, then list alternatives.
set wildmode=longest,list:longest

" What does the autocomplete pull from? This sets it to the current buffer,
" any open ones and any tags you may have.
set complete+=.,b,u,t

" fileignorecase ignores case usage in files.
set fileignorecase

set display+=lastline

" Display matching searches incrementally
set incsearch

set history=1000

set sessionoptions-=options

" don't ring or make noise
set noerrorbells

"more characters are sent to the screen for redrawing instead of using
"insert/delete line commands. this makes Vim seem smoother
set ttyfast

" which wrap allows hitting the right key and going to the next line
set whichwrap+=<,>,h,l,[,]

if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile	" keep an undo file (undo changes after closing)
endif

" Use one space not two after punctuation.
set nojoinspaces

" Set vim to look for a tags file recursively until it finds one.


" Syntax Highlighting:
"if we can have syntax recognition,this has to come after the colorscheme
if has("syntax")
    syntax on
endif

" set modelines to enable syntax highlighting even when the filename differs
" here's an example of a modeline
" /* vim: set filetype=markdown : */
set modeline


" Buffers Windows Tabs:
"
"look to see if a buffer is open before opening a new one
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

"modified buffers are hidden and multiple buffers can be worked on without
"forcing the user to save
set hidden

"if i change a file in a different window, reload it
set autoread

" Opening a window will place it below the current one
set splitbelow

" If vertical split is invoked put it on the right
set splitright

" Last window gets a status line
set laststatus=2

" Max out at 50 tabs
set tabpagemax=50


" Mappings:
" To see all current mappings run :map
"
"
" Easy window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" If running a terminal in Vim, go into Normal mode with Esc
tnoremap <Esc> <C-W>N

" select all text in buffer 
map <Leader>a ggVG

" Map :NERDTreeTabsToggle to ease toggling the plugin
map <Leader>n <plug>NERDTreeMirrorToggle<CR>

" Between the shell and IPython, autocomplete needs to be set to tab.
" Actually Tab is sorely needed to set whitespace in Python and Markdown
" imap <Tab> <C-P>


" Plugin Configuration:
" Builtin:
"
" Let Vim open Man pages with ex cmd
" :Man [cmd]
" From /usr/share/vim/vim80/doc/usr_12.txt
" Invoke while in Vim by putting your cursor over a word and run [Leader]K
runtime! ftplugin/man.vim

" from filetype line 590
let g:ft_man_folding_enable = 0

" filetype 596
set keywordprg=:Man


" Cheat40:
"Add a Vim cheat sheet with
"git clone https://github.com/lifepillar/vim-cheat40.git ~/.vim/pack/bundle/start/cheat40


" Vundle:"
" https://github.com/VundleVim/Vundle.vim/blob/master/README.md 

" NERDTree:
" https://github.com/scrooloose/nerdtree
"
"Open NERDTree automatically
autocmd Vimenter * NERDTree

" If Vim is opened with a file name as an argument, focus on the file
autocmd VimEnter * wincmd w

" How can I open a NERDTree automatically when vim starts up if no files were specified?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"How can I open NERDTree automatically when vim starts up on opening a directory?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

"Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"Close NERDTree if you open a file
let NERDTReeQuitOnOpen = 1

" Other recommended options
let NERDTreeDirArrows = 1

" Where NERDTree starts by default
let g:NERDTreeWinPos = "right"

" Show hidden files by default. Can slow things down
let NERDTreeShowHidden = 1

" Need my bookmarks
let NERDTreeShowBookmarks = 1

" Put the NERDTreeBookmarksFile in the .vim folder
let NERDTreeBookmarksFile = "$HOME/.vim/NERDTreeBookmarks"

" Sort nodes in a more obvious way (1,2,11,12,21,31) not (1,11,12,2,21,31)
let NERDTreeNaturalSort = 1

" Let NERDTree change your CWD
let NERDTreeChDirMode = 2

" Show line numbers
let NERDTreeShowLineNumbers=1


" NERDTree Tabs:
"
" Do not open NERDTree if vim starts in diff mode
let g:nerdtree_tabs_no_startup_for_diff = 1

" On startup - focus NERDTree when opening a directory, focus the file if 
" editing a specified file. When set to `2`, always focus file after startup.
let g:nerdtree_tabs_smart_startup_focus = 1

" Unfocus NERDTree when leaving a tab for descriptive tab names
let g:nerdtree_tabs_meaningful_tab_names = 1

" Close current tab if there is only one window in it and it's NERDTree
let g:nerdtree_tabs_autoclose = 1

" Open NERDTree on console vim startup
let g:nerdtree_tabs_open_on_console_startup = 1 

" When starting up with a directory name as a parameter, cd into it
let g:nerdtree_tabs_startup_cd = 1


" Jedi:
" https://github.com/davidhalter/jedi-vim
" jedi-vim is a vim binding to the autocompletion library jedi
"
" When you start typing `from module.name<space>` jedi-vim automatically
" adds the 'import' statement and displays the autocomplete pop-up.
let g:jedi#smart_auto_mappings = 0

" if the autocomplete on dot slows things down too much set to 0
let g:jedi#popup_on_dot = 0


" Vimwiki:
"
" Highlight checked list items with a special order
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_list = [{'path': '~/vimwiki/', 'auto_toc': 1}]

" Use local mouse mappings from |vimwiki-local-mappings|.
let g:vimwiki_use_mouse = 1

" Whenever Vimwiki's opened, cd to the directory where the page belongs.
" let g:vimwiki_auto_chdir


" Fugitive:
"
" The following options clean up our statusline
if exists('g:loaded_fugitive')
   set statusline=%f\ %m\ (%L\ lines)\ %r\ %=%{fugitive#statusline()}\ (%l,%c)\ %y
else
   set statusline=%f\ %m\ (%L\ lines)\ %r\ %=(%l,%c)\ %y
endif


" Tagbar:
" https://github.com/majutsushi/tagbar
nmap <F8> :TagbarToggle<CR>


" Flake8:
" https://github.com/nvie/vim-flake8
let g:flake8_show_quickfix=0
let g:flake8_show_in_gutter=1


" Ale:
" https://github.com/w0rp/ale
"
" <Leader>a is already mapped so use l for lint
nmap <Leader>l <Plug>(ale_toggle_buffer)
